// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: map.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MapTask_MapTask_FullMethodName = "/pb.MapTask/mapTask"
)

// MapTaskClient is the client API for MapTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapTaskClient interface {
	MapTask(ctx context.Context, in *MapReq, opts ...grpc.CallOption) (*MapResp, error)
}

type mapTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewMapTaskClient(cc grpc.ClientConnInterface) MapTaskClient {
	return &mapTaskClient{cc}
}

func (c *mapTaskClient) MapTask(ctx context.Context, in *MapReq, opts ...grpc.CallOption) (*MapResp, error) {
	out := new(MapResp)
	err := c.cc.Invoke(ctx, MapTask_MapTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapTaskServer is the server API for MapTask service.
// All implementations must embed UnimplementedMapTaskServer
// for forward compatibility
type MapTaskServer interface {
	MapTask(context.Context, *MapReq) (*MapResp, error)
	mustEmbedUnimplementedMapTaskServer()
}

// UnimplementedMapTaskServer must be embedded to have forward compatible implementations.
type UnimplementedMapTaskServer struct {
}

func (UnimplementedMapTaskServer) MapTask(context.Context, *MapReq) (*MapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapTask not implemented")
}
func (UnimplementedMapTaskServer) mustEmbedUnimplementedMapTaskServer() {}

// UnsafeMapTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapTaskServer will
// result in compilation errors.
type UnsafeMapTaskServer interface {
	mustEmbedUnimplementedMapTaskServer()
}

func RegisterMapTaskServer(s grpc.ServiceRegistrar, srv MapTaskServer) {
	s.RegisterService(&MapTask_ServiceDesc, srv)
}

func _MapTask_MapTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapTaskServer).MapTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapTask_MapTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapTaskServer).MapTask(ctx, req.(*MapReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MapTask_ServiceDesc is the grpc.ServiceDesc for MapTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MapTask",
	HandlerType: (*MapTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "mapTask",
			Handler:    _MapTask_MapTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "map.proto",
}
