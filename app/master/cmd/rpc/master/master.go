// Code generated by goctl. DO NOT EDIT.
// Source: master.proto

package master

import (
	"context"

	"remarks_monitor/app/master/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetMapReq  = pb.GetMapReq
	GetMapResp = pb.GetMapResp
	GetRpcReq  = pb.GetRpcReq
	GetRpcResp = pb.GetRpcResp
	Record     = pb.Record
	SearchReq  = pb.SearchReq
	SearchResp = pb.SearchResp

	Master interface {
		GetMap(ctx context.Context, in *GetMapReq, opts ...grpc.CallOption) (*GetMapResp, error)
		GetRpc(ctx context.Context, in *GetRpcReq, opts ...grpc.CallOption) (*GetRpcResp, error)
		Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	}

	defaultMaster struct {
		cli zrpc.Client
	}
)

func NewMaster(cli zrpc.Client) Master {
	return &defaultMaster{
		cli: cli,
	}
}

func (m *defaultMaster) GetMap(ctx context.Context, in *GetMapReq, opts ...grpc.CallOption) (*GetMapResp, error) {
	client := pb.NewMasterClient(m.cli.Conn())
	return client.GetMap(ctx, in, opts...)
}

func (m *defaultMaster) GetRpc(ctx context.Context, in *GetRpcReq, opts ...grpc.CallOption) (*GetRpcResp, error) {
	client := pb.NewMasterClient(m.cli.Conn())
	return client.GetRpc(ctx, in, opts...)
}

func (m *defaultMaster) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	client := pb.NewMasterClient(m.cli.Conn())
	return client.Search(ctx, in, opts...)
}
