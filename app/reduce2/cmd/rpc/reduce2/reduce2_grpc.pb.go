// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: reduce2.proto

package reduce2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReduceWork2_ReduceWork2_FullMethodName = "/reduce2.ReduceWork2/ReduceWork2"
)

// ReduceWork2Client is the client API for ReduceWork2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReduceWork2Client interface {
	ReduceWork2(ctx context.Context, in *ReduceWorkReq, opts ...grpc.CallOption) (*ReduceWorkResp, error)
}

type reduceWork2Client struct {
	cc grpc.ClientConnInterface
}

func NewReduceWork2Client(cc grpc.ClientConnInterface) ReduceWork2Client {
	return &reduceWork2Client{cc}
}

func (c *reduceWork2Client) ReduceWork2(ctx context.Context, in *ReduceWorkReq, opts ...grpc.CallOption) (*ReduceWorkResp, error) {
	out := new(ReduceWorkResp)
	err := c.cc.Invoke(ctx, ReduceWork2_ReduceWork2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReduceWork2Server is the server API for ReduceWork2 service.
// All implementations must embed UnimplementedReduceWork2Server
// for forward compatibility
type ReduceWork2Server interface {
	ReduceWork2(context.Context, *ReduceWorkReq) (*ReduceWorkResp, error)
	mustEmbedUnimplementedReduceWork2Server()
}

// UnimplementedReduceWork2Server must be embedded to have forward compatible implementations.
type UnimplementedReduceWork2Server struct {
}

func (UnimplementedReduceWork2Server) ReduceWork2(context.Context, *ReduceWorkReq) (*ReduceWorkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceWork2 not implemented")
}
func (UnimplementedReduceWork2Server) mustEmbedUnimplementedReduceWork2Server() {}

// UnsafeReduceWork2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReduceWork2Server will
// result in compilation errors.
type UnsafeReduceWork2Server interface {
	mustEmbedUnimplementedReduceWork2Server()
}

func RegisterReduceWork2Server(s grpc.ServiceRegistrar, srv ReduceWork2Server) {
	s.RegisterService(&ReduceWork2_ServiceDesc, srv)
}

func _ReduceWork2_ReduceWork2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceWorkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduceWork2Server).ReduceWork2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReduceWork2_ReduceWork2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduceWork2Server).ReduceWork2(ctx, req.(*ReduceWorkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReduceWork2_ServiceDesc is the grpc.ServiceDesc for ReduceWork2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReduceWork2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reduce2.ReduceWork2",
	HandlerType: (*ReduceWork2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReduceWork2",
			Handler:    _ReduceWork2_ReduceWork2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reduce2.proto",
}
