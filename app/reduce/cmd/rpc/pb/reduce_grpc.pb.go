// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: reduce.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReduceWork_ReduceWork_FullMethodName = "/pb.ReduceWork/ReduceWork"
)

// ReduceWorkClient is the client API for ReduceWork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReduceWorkClient interface {
	ReduceWork(ctx context.Context, in *ReduceWorkReq, opts ...grpc.CallOption) (*ReduceWorkResp, error)
}

type reduceWorkClient struct {
	cc grpc.ClientConnInterface
}

func NewReduceWorkClient(cc grpc.ClientConnInterface) ReduceWorkClient {
	return &reduceWorkClient{cc}
}

func (c *reduceWorkClient) ReduceWork(ctx context.Context, in *ReduceWorkReq, opts ...grpc.CallOption) (*ReduceWorkResp, error) {
	out := new(ReduceWorkResp)
	err := c.cc.Invoke(ctx, ReduceWork_ReduceWork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReduceWorkServer is the server API for ReduceWork service.
// All implementations must embed UnimplementedReduceWorkServer
// for forward compatibility
type ReduceWorkServer interface {
	ReduceWork(context.Context, *ReduceWorkReq) (*ReduceWorkResp, error)
	mustEmbedUnimplementedReduceWorkServer()
}

// UnimplementedReduceWorkServer must be embedded to have forward compatible implementations.
type UnimplementedReduceWorkServer struct {
}

func (UnimplementedReduceWorkServer) ReduceWork(context.Context, *ReduceWorkReq) (*ReduceWorkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceWork not implemented")
}
func (UnimplementedReduceWorkServer) mustEmbedUnimplementedReduceWorkServer() {}

// UnsafeReduceWorkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReduceWorkServer will
// result in compilation errors.
type UnsafeReduceWorkServer interface {
	mustEmbedUnimplementedReduceWorkServer()
}

func RegisterReduceWorkServer(s grpc.ServiceRegistrar, srv ReduceWorkServer) {
	s.RegisterService(&ReduceWork_ServiceDesc, srv)
}

func _ReduceWork_ReduceWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceWorkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduceWorkServer).ReduceWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReduceWork_ReduceWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduceWorkServer).ReduceWork(ctx, req.(*ReduceWorkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReduceWork_ServiceDesc is the grpc.ServiceDesc for ReduceWork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReduceWork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ReduceWork",
	HandlerType: (*ReduceWorkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReduceWork",
			Handler:    _ReduceWork_ReduceWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reduce.proto",
}
