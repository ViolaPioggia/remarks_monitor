// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: reduce1.proto

package reduce1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReduceWork1_ReduceWork1_FullMethodName = "/reduce1.ReduceWork1/ReduceWork1"
)

// ReduceWork1Client is the client API for ReduceWork1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReduceWork1Client interface {
	ReduceWork1(ctx context.Context, in *ReduceWorkReq, opts ...grpc.CallOption) (*ReduceWorkResp, error)
}

type reduceWork1Client struct {
	cc grpc.ClientConnInterface
}

func NewReduceWork1Client(cc grpc.ClientConnInterface) ReduceWork1Client {
	return &reduceWork1Client{cc}
}

func (c *reduceWork1Client) ReduceWork1(ctx context.Context, in *ReduceWorkReq, opts ...grpc.CallOption) (*ReduceWorkResp, error) {
	out := new(ReduceWorkResp)
	err := c.cc.Invoke(ctx, ReduceWork1_ReduceWork1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReduceWork1Server is the server API for ReduceWork1 service.
// All implementations must embed UnimplementedReduceWork1Server
// for forward compatibility
type ReduceWork1Server interface {
	ReduceWork1(context.Context, *ReduceWorkReq) (*ReduceWorkResp, error)
	mustEmbedUnimplementedReduceWork1Server()
}

// UnimplementedReduceWork1Server must be embedded to have forward compatible implementations.
type UnimplementedReduceWork1Server struct {
}

func (UnimplementedReduceWork1Server) ReduceWork1(context.Context, *ReduceWorkReq) (*ReduceWorkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceWork1 not implemented")
}
func (UnimplementedReduceWork1Server) mustEmbedUnimplementedReduceWork1Server() {}

// UnsafeReduceWork1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReduceWork1Server will
// result in compilation errors.
type UnsafeReduceWork1Server interface {
	mustEmbedUnimplementedReduceWork1Server()
}

func RegisterReduceWork1Server(s grpc.ServiceRegistrar, srv ReduceWork1Server) {
	s.RegisterService(&ReduceWork1_ServiceDesc, srv)
}

func _ReduceWork1_ReduceWork1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceWorkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReduceWork1Server).ReduceWork1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReduceWork1_ReduceWork1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReduceWork1Server).ReduceWork1(ctx, req.(*ReduceWorkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReduceWork1_ServiceDesc is the grpc.ServiceDesc for ReduceWork1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReduceWork1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reduce1.ReduceWork1",
	HandlerType: (*ReduceWork1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReduceWork1",
			Handler:    _ReduceWork1_ReduceWork1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reduce1.proto",
}
