// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: input.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Input_Input_FullMethodName = "/pb.input/input"
)

// InputClient is the client API for Input service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InputClient interface {
	Input(ctx context.Context, in *InputReq, opts ...grpc.CallOption) (*InputResp, error)
}

type inputClient struct {
	cc grpc.ClientConnInterface
}

func NewInputClient(cc grpc.ClientConnInterface) InputClient {
	return &inputClient{cc}
}

func (c *inputClient) Input(ctx context.Context, in *InputReq, opts ...grpc.CallOption) (*InputResp, error) {
	out := new(InputResp)
	err := c.cc.Invoke(ctx, Input_Input_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InputServer is the server API for Input service.
// All implementations must embed UnimplementedInputServer
// for forward compatibility
type InputServer interface {
	Input(context.Context, *InputReq) (*InputResp, error)
	mustEmbedUnimplementedInputServer()
}

// UnimplementedInputServer must be embedded to have forward compatible implementations.
type UnimplementedInputServer struct {
}

func (UnimplementedInputServer) Input(context.Context, *InputReq) (*InputResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Input not implemented")
}
func (UnimplementedInputServer) mustEmbedUnimplementedInputServer() {}

// UnsafeInputServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InputServer will
// result in compilation errors.
type UnsafeInputServer interface {
	mustEmbedUnimplementedInputServer()
}

func RegisterInputServer(s grpc.ServiceRegistrar, srv InputServer) {
	s.RegisterService(&Input_ServiceDesc, srv)
}

func _Input_Input_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputServer).Input(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Input_Input_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputServer).Input(ctx, req.(*InputReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Input_ServiceDesc is the grpc.ServiceDesc for Input service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Input_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.input",
	HandlerType: (*InputServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "input",
			Handler:    _Input_Input_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "input.proto",
}
